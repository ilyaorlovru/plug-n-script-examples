<?xml version="1.0" encoding="utf-8" ?>
<SKIN layout_type="column" h_margin="8" v_margin="2">
  
  <!-- just a shortcut for rewriteable variable -->
  <DEFINE><VAR base_type="VARIABLE" override="true" /></DEFINE>

  <!-- Definitions -->
  <VAR id="N_BARS" value="96"/> <!-- set it the same as in .cxx file -->
  <VAR id="UPDATE_ALL_BARS_AT_ONCE" value="true"/> <!-- set to false if you want to update bars immediatle after receiving new chunk of data -->
  
  <VAR id="ENABLE_DATA_PACKING" value="true" /> <!-- true or false, set the same as in CXX -->
  <VAR id="MIN_VALUE" value="-102.3"/> <!-- set the same in CXX -->
  <VAR id="MAX_VALUE" value="0"/> <!-- set the same in CXX -->

  <!-- input parameters shortcuts -->
  <VAR id="IPS_DATACONTROL" value="$script_input_string0$"/>

  <!-- output parameters shortcuts -->
  <VAR id="OP_DATACONTROL" value="custom_out_param0"/>
  <VAR id="OP_DATA_START" value="1"/>
  <VAR id="OP_DATA_END" value="16"/>
  <VAR id="OP_DATA_LEN" formula="$OP_DATA_END$-$OP_DATA_START$+1"/>
  <VAR id="OP_TRANSFER_SPEED" value="custom_out_param17"/>

  <EXPOSED_OBJECTS object_ids="" />

  <!-- scripts -->
  <SCRIPT requires="$OP_DATACONTROL$;$IPS_DATACONTROL$;my_string" script="
  array&lt;Kt::Param@> opdata($OP_DATA_LEN$); /* array access to outputParams */
  array&lt;Kt::Param@> bars($N_BARS$); /* used for displaying level values */
  array&lt;double> bars_cache($N_BARS$); /* used for caching data */

  bool data_packing_enabled = ($ENABLE_DATA_PACKING$ == true);
  bool update_all_bars_at_once = ($UPDATE_ALL_BARS_AT_ONCE$ == true);

  void onLoad(){
    receiveDataChunk();
  }

  /* receives and parsed data sent via outputParams */
  /* called, when new chunk of data is received */
  void receiveDataChunk(){
    int lev_ind_start = int($OP_DATACONTROL$ +.5);

    /* my_string = &quot;&quot; + lev_ind_start; */

    if (lev_ind_start &lt; 0) lev_ind_start = 0;

    /* if it's a new cycle, update all bars at once */
    if ((lev_ind_start == 0) and update_all_bars_at_once) {
      updateAllBars();
    }

    /* parse incoming chunk of data */
    
    int lev_ind = lev_ind_start;

    for (int i=0;i&lt;$OP_DATA_LEN$;i++){
      if (data_packing_enabled) {
        if (lev_ind >= $N_BARS$) break;
        /* data unpacking */
        unpack3(opdata[i]); /* we get vals in u1, u2, u3 */
        if (update_all_bars_at_once) {
          /* put received data to cache */
          bars_cache[lev_ind] = u1;
          if (lev_ind >= $N_BARS$-1) break;
          bars_cache[lev_ind+1] = u2;
          if (lev_ind >= $N_BARS$-2) break;
          bars_cache[lev_ind+2] = u3;
        } else {
          bars[lev_ind] = u1;
          if (lev_ind >= $N_BARS$-1) break;
          bars[lev_ind+1] = u2;
          if (lev_ind >= $N_BARS$-2) break;
          bars[lev_ind+2] = u3;
        }
        lev_ind+=3;

      } else {
        if (lev_ind >= $N_BARS$) break;
        /* no data packing */
        if (update_all_bars_at_once) {
          bars_cache[lev_ind] = opdata[i]; /* put received data to cache */
        } else {
          bars[lev_ind] = opdata[i];
        }
        lev_ind++;
      }
    }
    $IPS_DATACONTROL$ = &quot;&quot; + lev_ind_start; /* send back to CXX */

  }

  /* showing the whole received bars data */
  void updateAllBars(){
    for (int i=0;i&lt;$N_BARS$;i++){
      bars[i] = bars_cache[i];
    }
  }

  /* unpacking data functions */
  const int pack_bitsperval = 10;
  const int pack_bitmask = int(pow(2,pack_bitsperval))-1;
  const double pack_range = ($MAX_VALUE$ - $MIN_VALUE$);
  const double pack_coeff = pack_bitmask/pack_range;
  double u1, u2, u3; /* vars for unpacked data */
  void unpack3(double packeddbl){
    int64 packed = int(packeddbl*100.0 + .5);
    u1 = ((packed >> pack_bitsperval*2) &amp; pack_bitmask) / pack_coeff - pack_range;
    u2 = ((packed >> pack_bitsperval) &amp; pack_bitmask) / pack_coeff - pack_range;
    u3 = (packed &amp; pack_bitmask) / pack_coeff - pack_range;
  }

  /* helper functions */
  double round(double d, double p = 2) {
      double x = pow(10, p);
      double r = floor(d*x+0.5)/x ;
      return r;
  }
  "/>

  <!-- connect opdata array to outputParams (custom_out_param...) -->
  <!-- so that we can access that data as array of params in script -->
  <VAR id="i" value="0" />
  <REPEAT count="$OP_DATA_LEN$" start="$OP_DATA_START$">
    <ACTION_TRIGGER event_id="window.loaded.value_changed" condition_formula="window.loaded==1" script="@opdata[$i$]=custom_out_param$index$" requires="custom_out_param$index$"/>
    <VAR id="i" formula="$i$+1" />
  </REPEAT>

  <!-- create enough params to hold levels and connect them to script array -->
  <REPEAT count="$N_BARS$">
    <PARAM id="level$index$" min="$MIN_VALUE$" max="$MAX_VALUE$" default="0" />
    <ACTION_TRIGGER event_id="window.loaded.value_changed" condition_formula="window.loaded==1" script="@bars[$index$]=level$index$" requires="level$index$"/>
  </REPEAT>

  <!-- output info -->
  <ROW text_color="#CCCCCC" spacing="20" v_margin="5" v_offset="-5">
    <TEXT value="Number of bars: $N_BARS$" value_format=".0" />

    <ROW>
      <TEXT value="Transfer speed: " />
      <ROW spacing="5">
        <PARAM_TEXT param_id="$OP_TRANSFER_SPEED$" content="{value} {unit}" value_format=".0" />
        <FORMULA_PARAM id="array_speed" formula="$OP_TRANSFER_SPEED$/$N_BARS$.0" value_format=".2"/>
        <FORMULA_PARAM id="transaction_speed" formula="abs($OP_TRANSFER_SPEED$/($ENABLE_DATA_PACKING$*3 + 1*($ENABLE_DATA_PACKING$-1))) / $OP_DATA_LEN$" value_format=".0"/>
        <PARAM_TEXT param_id="array_speed" content="{value} array/s" value_format=".2" />
        <PARAM_TEXT param_id="transaction_speed" content="{value} transactions/s" value_format=".0" />
      </ROW>
  </ROW>
    

    <STRING id="my_string" default=" " />
    <TEXT_EDIT_BOX string_id="my_string" text_color="#000" width="150" display="false" />
  </ROW>

  <!-- output bars -->
  <ROW spacing="1">
    <REPEAT count="$N_BARS$">
      <COLUMN>
      <!--
      <PARAM_TEXT id="pt$index$" param_id="level$index$" font_escapement="90" font_size="10" text_color="#AAAAAA" height="45" width="15" text_h_align="left" text_v_align="center" content="{value}" value_format=".1" v_offset="-7" exposed="true" />
      <PARAM_LINK id="pl$index$" from="level$index$" to="pt$index$.opacity" formula="1.3-(-x/60)" /> 
      -->
      <CUS_VMETER height="120" param_id="level$index$" />
      </COLUMN>
    </REPEAT>
  </ROW>

  <!-- ACTIONS -->
  
  <!-- window onload -->
  <ACTION_TRIGGER event_id="window.loaded.value_changed" script="onLoad();" async="false" />

  <!-- receive data on control change -->
  <ACTION_TRIGGER event_id="$OP_DATACONTROL$.value_changed" script="receiveDataChunk();" async="true" />

</SKIN>